Writing an Interpreter in Go

Capitol One Conference Center
Plano, Texas, USA
April 5, 2016

* Who Am I

* Paul Graham - YCombinator
 Your mind is like a compiled program you've lost the source of.
 It works, but you don't know why.

* What is a Compiler
- program to transform a source language into a target language
- immutable - Same Input Yields Same Output 
- typically compiled program run "faster"

* Examples of Compiled Languages
- /usr/local/go/bin/go build is a Compiler.  
- c is a Compiler
- javac is a compiler for java virtual machine
- YACC is a compiler into Go (and many other languages)
- Ken Thompson Wrote regular expression compiler
- research into compiling SQL into native code (Oracle, PostgreSQL)

* What is an Interpreter?
- program that directly executes the source program, typical text file

.image godfw-hoq-20160405/tao.gif

- bourne shell, awk, javascript, ruby, SQL
- lisp was the first interpreter
- java is an interpreter of javac output (strictly speaking)

* Interpreter Translates Source into Internal Format
- abstract syntax tree (perl5, awk)
- line by line (many unix shells)
- virtual machine instruction (python, java, perl6)
- just in time compilation (java)

* What is HOQ?
- toy interpreter to demonstrate famous YACC compiler in Go
- demonstrates "Communicating Sequential Processes", hopefully

Did I bite off more than I can chew?

* HOQ Language is Very Simple
- language is mostly declarative, like SQL
 exec b() when a.exit_status == 0;
- executes entire unix programs, like shell
- consuming input text drives the program
- input lines split on tab separated boundaries ($1, $2, ...)
- inspired by "HOC" Calculator in Book "Unix Programming Environment"

* HOQ is Mostly Declarative
- execution order determined by boolean qualifications
- qualify on patterns in input text
- qualify on process exit status
- concurrent execution, partially ordered as directed acyclic graph
 make --jobs 4

* Hello, World in HOQ

.code godfw-hoq-20160405/say.hoq 
.caption say.hoq

* Hello, World in HOQ - Run
.code godfw-hoq-20160405/say.hoq 
.caption say.hoq

.code godfw-hoq-20160405/say.term 
.caption Terminal

* Hello, Gophers
.code godfw-hoq-20160405/say-gopher.hoq 
.caption say-gopher.hoq

.code godfw-hoq-20160405/say-gopher.term 
.caption Terminal

* Hello, Trinity
.code godfw-hoq-20160405/say-gopher-trinity.hoq 
.caption say-gopher-trinity.hoq

.code godfw-hoq-20160405/say-gopher-trinity.term 
.caption Terminal

* Confluence
- AST is a flow graph!
- Input Text and Exit Codes Flow Bottom Up

* Overview of CSP
- Book "Communicating Sequential Process"
  third-most cited computer science reference of all time according to Citeseer 
- Squinting at Power Series by Doug McIlroy
 rewrites calculus Taylor series in CSP!

* Overview of Go Yacc
- Write Programs to Write Programs
- YACC is Really Fun - VERY Geeky
- Compiles a Flavor of Backus-Naur Form
- Orginal Golang Grammar
- Domain Specific Language
- Go version of YACC derived from Plan9 YACC in C

* YACC Needs a Lexer 
- Think of a Lexer as Big switch{}
- Busts Text into Integer Tokens
- Token Constants Defined by YACC (see %token in grammar)
- Lexer Easy to Write by Hand
- CoRoutines Invented to Write Lexers

* Complex Example of HOQ
- Regression Test

* Go Idioms
- close is cheap broadcast
- serial functions easy to make concurrent
- null method pointer allows elegant recursive termination

* Breakdown of Hoq Grammer

* Breakdown of Go Code
- hoq.go
- ast.go
- command.go (rename to exec.go)?
- compile.go
- opcode.go
- parser.y
- rummy.go
- tsort.go

* Breakdown of Opcodes and Machine Model

* Ideas for Future Hoq

* Ideas for Future Go Talks

* YACC Resources
.link https://docs.google.com/document/d/1P3BLR31VA8cvLJLfMibSuTdwTuF7WWLux71CYD0eeD8/edit Early GoLang in YACC
.link http://www.amazon.com/Unix-Programming-Environment-Prentice-Hall-Software/dp/013937681X Book 'Unix Programming Environment" by Kernighan and Pike
.link http://heim.ifi.uio.no/inf2270/programmer/historien-om-C.pdf C Written in Yacc
.link https://github.com/golang-samples/yacc Simple Go Calculator
.link https://golang.org/pkg/go/ast/ Go AST Library

* Lex Resources
.link https://www.youtube.com/watch?v=HxaD_trXwRE Lexer Talk by Rob Pike
.link http://www.colm.net/open-source/ragel/ Ragle is a Lexical Compiler
.link http://www-cs-students.stanford.edu/~blynn/nex/ Nex (New Lex)
.link https://godoc.org/golang.org/x/exp/ebnf EBNF in GoLang
