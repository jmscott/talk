Easy Concurrency from Sequential Functions

John Scott
jmscott@setspace.com
https://github.com/jmscott

Unix/Database Consultant
Founder, SetSpace, Inc, 1998-now
Founder, august.{com,net}, Inc, 1998-2006

Presented at Viverae
Dallas, Texas, USA
June 21, 2016

* @dreid

Programming computers is an exercise in constantly making things whose complexity just slightly exceeds your own comprehension.

* Go Concurrency Patterns: Pipelines and cancellation

.link https://blog.golang.org/pipelines

* What is a Sequential Process?
.play godfw-ezcsp-20160621/fib.go
.caption Single Fibonacci Call

* Sequential Processing is Slow!
.play godfw-ezcsp-20160621/fib-8.go
.caption Eight Fibonacci Calls, Sequentially

* Concurrent Calls to Fibonacci Much Quicker
.play godfw-ezcsp-20160621/fibber-8.go
.caption Eight Fibonacci Calls, Concurrently

* Flow Oriented Computing
- receive values from upstream via inbound channels
- perform some function on that data, usually producing new values
- send values downstream via outbound channels

* Build a Fibonacci Flow "Op"
.play godfw-ezcsp-20160621/fib-flow.go /^func fib_flow/,/END MAIN OMIT$/

* Build a Square Flow "Op"
.play godfw-ezcsp-20160621/sqr-flow.go /^func sqr_flow/,/END MAIN OMIT$/

* Compose Flow Operations
- data in pipeline, not on heap or stack
- scheduling based on flow not time sliced
- pipelines can be connected into _Directed_Acyclic_Graph_ (DAG)
- flows (with no side effects) always terminate!

* Easy to Compose New Flow Operations
.play godfw-ezcsp-20160621/compose.go /^func sqr_fib_flow/,/END MAIN OMIT$/
.caption In/Out Channels Same Data Type!

* Merge Many Channels into One
.code godfw-ezcsp-20160621/merge.go

* Flow 8 Requests to 4 Fibbers
.play godfw-ezcsp-20160621/merge-8.go /^func pump/,/END MAIN OMIT$/
