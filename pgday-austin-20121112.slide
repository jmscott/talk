Experimenting with Phrase Text Search and New RUM Index

Galvanize
November 12, 2016
Austin, Texas, USA

*John*Scott*
CTO of RJ2 Technologies

jmscott@rj2tech.com
https://github.com/jmscott/talk

* "Facts", Immutablility and Blobs

- a fact is always in the past tense
- a sha digest is the key to the pdf
- the pdf blob does not need to be stored in postgres

* What is Full text Search

- Documents are plain old text, in database encoding
- Supports Many Text Encoding
- UTF-8 Encoding of Text Simplifies
- Only Two Datatypes Implement Text Search

* Who Wrote Full Text Search?
- Postgres Pro, a  Russian Company
- Oleg Bartunov
- Teodor Sigaev

* Think of Full Text Search as a Toolkit to Build Text Search Engines

- relational model excellent for correlating text with analytic data
- chemical equations
- gene sequences
- text fields in spreadsheet
- elastic search still better for text only search

* Source of the PDF Documents for the Demo

- arvix.org (Cornell, won the MacArthur Genius Award)
- Theory of Computing Blog Aggregator (http://feedworld.net/toc/)
- Electronic Colloquim on Computational Complexity eccc.hpi-web.de
- Many academic web sites surfed for past 10 years.

* Statistics of PDF Documents for Today

.html pgday-austin-20121112/stat.html

* Example of "Google" Style Search
 NEURAL CRYPTOGRAPHY

* Full Text Search Data Types - Only 2!
tsvector

 sorted list of lexemes (words) in the text, with optional positions for proximity ranking

tsquery

 boolean combinations of lexemes and the "followed by" <-> operator for phrases

* TSVector Data Type

.code pgday-austin-20121112/tsv1.code

Positions of Lexemes Needed for Proximity Ranking

.code pgday-austin-20121112/tsv2.code

Maps (Stem) Words to Lexemes and Removes Stop Words

.code pgday-austin-20121112/tsv3.code

* TSQuery Data Type

Boolean AND, OR, NOT with Grouping of Lexemes
.code pgday-austin-20121112/tsq2.code

Rearranges nested operators into a logically equivalent formulation
.code pgday-austin-20121112/tsq3.code
<-> is "Followed By" Operator.
<6> Means Exactly 6 Words Apart

* TSQuery Data Type

Lexemes in a tsquery can be labeled with * to specify prefix matching

.code pgday-austin-20121112/tsq4.code

Match any word in a tsvector that begins with "super"

* How to Query Text with the Boolean @@ Operator

.code pgday-austin-20121112/q1.code

.code pgday-austin-20121112/q2.code

* Text Search Indexes

GIN - Inverted Index
.code pgday-austin-20121112/idx1.code

GIST

RUM

* Full Text Search Operators
- full boolean
- phrases (with exact distance between words)

* Keyword Search Query
- plainto_tsquery()
- neural cryptography

* Phrase Search
- phraseto_tsquery()
- "neural cryptography"

- Exact Phrase "hello, world"
- Phrase with Words an Exact Distance
	"good <1> cruel world"
- RUM Index

* Ranking the Search Results (Normalization)
- coverage density of matching keywords/phrases
- page nearset to the top

* Preprocessing Documents
- Parsing documents into tokens. 
- Converting tokens into lexemes.
- Storing preprocessed documents optimized for searching.

* Dictionary

- Misspelt words map to 
- 'simple' dictionary is exact search

* Database Schema for PDF Blobs

- table 'pddocument' stores document metadata
- table 'page_text_utf8' stores text of pages
- table 'page_tsv_utf8' stores text vectors for a single page

* Extracting/Pushind PDF Pages to the Database

- extracting pdf text is "hard" - think OCR hard
- pdfbox.apache.org (best but slowest)
- extracted pdf "blob" is a file with sha digest as the path
- only single pages are searched
- immutable pdf "blob" is a file with sha digest as the path
- sha digest is the primary key in the database
- simple shell scripts to extract pdf text
- pdftotext
- Commerical (non-Adobe) are "OK"

* Generating Snippets of Matching Text
- ts_headline()

* Parsing the Google Style Search
